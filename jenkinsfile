pipeline {
    agent any

    environment {
        registryCredentials = "nexus"
        registry = "192.168.33.10:8083"
        imageName = "nodemongoapp"
        imageTag = "6.0"
        DOCKER_IMAGE = "${registry}/repository/docker-repo/${imageName}:${imageTag}"
        K8S_DEPLOYMENT_NAME = "nodemongoapp-deployment"
        K8S_SERVICE_NAME = "nodemongoapp-service"
        CONTAINER_PORT = "3000" // Update with your app's port
    }

    stages {
        stage('Install dependencies') {
            steps {
                script {
                    sh 'npm install'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        stage('Building images') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Generate Kubernetes Manifests') {
            steps {
                script {
                    // Create deployment.yaml
                    writeFile file: 'deployment.yaml', text: """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${K8S_DEPLOYMENT_NAME}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ${imageName}
  template:
    metadata:
      labels:
        app: ${imageName}
    spec:
      imagePullSecrets:
      - name: regcred
      containers:
      - name: ${imageName}
        image: ${DOCKER_IMAGE}
        ports:
        - containerPort: ${CONTAINER_PORT}
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
"""
                    // Create service.yaml
                    writeFile file: 'service.yaml', text: """
apiVersion: v1
kind: Service
metadata:
  name: ${K8S_SERVICE_NAME}
spec:
  type: NodePort
  selector:
    app: ${imageName}
  ports:
    - protocol: TCP
      port: 80
      targetPort: ${CONTAINER_PORT}
"""
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([
                        file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE'),
                        usernamePassword(
                            credentialsId: 'nexus',
                            usernameVariable: 'NEXUS_USER',
                            passwordVariable: 'NEXUS_PASS'
                        )            
                    ]) {
                        sh '''
                            mkdir -p ${WORKSPACE}/.kube
                            cp "${KUBECONFIG_FILE}" ${WORKSPACE}/.kube/config
                            chmod 600 ${WORKSPACE}/.kube/config
                            export KUBECONFIG=${WORKSPACE}/.kube/config
                            
                            # Create Docker registry secret for Nexus
                            kubectl create secret docker-registry regcred \
                                --docker-server=${registry} \
                                --docker-username=${NEXUS_USER} \
                                --docker-password=${NEXUS_PASS} \
                                --docker-email=${NEXUS_USER}@users.noreply.nexus.com \
                                --dry-run=client -o yaml | kubectl apply -f -

                            kubectl apply -f deployment.yaml
                            kubectl apply -f service.yaml
                            
                            # Verify deployment
                            kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME} --timeout=5m || true
                            kubectl get pods -o wide
                            kubectl describe deployment ${K8S_DEPLOYMENT_NAME}
                        '''
                    }
                }
            }
        }
    }
}